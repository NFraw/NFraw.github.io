<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Leetcode 面试经典150题</title>
    <link href="/2024/10/31/LeetCode/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8150%E9%A2%98/"/>
    <url>/2024/10/31/LeetCode/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8150%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="1-88-合并两个有序数组-可跳转"><a href="#1-88-合并两个有序数组-可跳转" class="headerlink" title="1 88. 合并两个有序数组(可跳转)"></a>1 <a href="https://leetcode.cn/problems/merge-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150">88. 合并两个有序数组(可跳转)</a></h1><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意</strong>：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入</strong>：nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3, nums2 &#x3D; [2,5,6], n &#x3D; 3<br><strong>输出</strong>：[1,2,2,3,5,6]<br><strong>解释</strong>：需要合并 [1,2,3] 和 [2,5,6] 。<br>合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入</strong>：nums1 &#x3D; [1], m &#x3D; 1, nums2 &#x3D; [], n &#x3D; 0<br><strong>输出</strong>：[1]<br><strong>解释</strong>：需要合并 [1] 和 [] 。<br>合并结果是 [1] 。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入</strong>：nums1 &#x3D; [0], m &#x3D; 0, nums2 &#x3D; [1], n &#x3D; 1<br><strong>输出</strong>：[1]<br><strong>解释</strong>：需要合并的数组是 [] 和 [1] 。<br>合并结果是 [1] 。<br>注意，因为 m &#x3D; 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</p></blockquote><p>提示：</p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li></ul><p><strong>进阶</strong>*：你可以设计实现一个时间复杂度为 O(m + n) 的算法解决此问题吗？</p><h2 id="解法1：-时间复杂度O-m-n-，空间复杂度O-1"><a href="#解法1：-时间复杂度O-m-n-，空间复杂度O-1" class="headerlink" title="解法1：(时间复杂度O(m+n)，空间复杂度O(1))"></a>解法1：(时间复杂度O(m+n)，空间复杂度O(1))</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">        &gt; File Name: 1.merge.c</span><br><span class="hljs-comment">        &gt; Author:ZhangNan </span><br><span class="hljs-comment">        &gt; Mail:1470161695@qq.com </span><br><span class="hljs-comment">        &gt; Created Time: Mon 28 Oct 2024 10:38:38 AM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> *nums3 = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">calloc</span>(nums1Size, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;<br>        <span class="hljs-keyword">if</span>(nums1[i] &lt;= nums2[j]) &#123;<br>            <span class="hljs-comment">//printf(&quot;11:k = %d, i = %d, j = %d\n&quot;, k, i, j);</span><br>            nums3[k++] = nums1[i++];<br>            <span class="hljs-comment">//printf(&quot;nums3 = %d\n&quot;, nums3[k - 1]);</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//printf(&quot;12:k = %d, i = %d, j = %d\n&quot;, k, i, j);</span><br>            nums3[k++] = nums2[j++];<br>            <span class="hljs-comment">//printf(&quot;nums3 = %d\n&quot;, nums3[k - 1]);</span><br>        <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt; m)&#123;<br>        <span class="hljs-comment">//printf(&quot;2:k = %d, i = %d, j = %d\n&quot;, k, i, j);</span><br>        nums3[k++]= nums1[i++];<br>        <span class="hljs-comment">//printf(&quot;nums3 = %d\n&quot;, nums3[k - 1]);</span><br>    &#125;<br>    <span class="hljs-keyword">while</span>(j &lt; n)&#123;<br>        <span class="hljs-comment">//printf(&quot;3:k = %d, i = %d, j = %d\n&quot;, k, i, j);</span><br>        nums3[k++]= nums2[j++];<br>        <span class="hljs-comment">//printf(&quot;nums3 = %d\n&quot;, nums3[k - 1]);</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums1Size; i++) &#123;<br>        nums1[i] = nums3[i];<br>    &#125;<br>    <span class="hljs-built_in">free</span>(nums3); <br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> nums1[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> nums2[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>    <span class="hljs-type">int</span> nums1Size = m + n;<br>    <span class="hljs-type">int</span> nums2Size = n;<br>    merge(nums1, nums1Size, m, nums2, nums2Size, n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums1Size; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>, nums1[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="2-27-移除元素-可跳转"><a href="#2-27-移除元素-可跳转" class="headerlink" title="2 27. 移除元素(可跳转)"></a>2 <a href="https://leetcode.cn/problems/remove-element/description/?envType=study-plan-v2&envId=top-interview-150">27. 移除元素(可跳转)</a></h1><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <code>原地</code> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p><p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p><p>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。<br>返回 <code>k</code>。<br><strong>用户评测：</strong></p><p>评测机将使用以下代码测试您的解决方案：</p><blockquote><p>int[] nums &#x3D; […]; &#x2F;&#x2F; 输入数组<br>int val &#x3D; …; &#x2F;&#x2F; 要移除的值<br>int[] expectedNums &#x3D; […]; &#x2F;&#x2F; 长度正确的预期答案。<br>                            &#x2F;&#x2F; 它以不等于 val 的值排序。<br>int k &#x3D; removeElement(nums, val); &#x2F;&#x2F; 调用你的实现<br>assert k &#x3D;&#x3D; expectedNums.length;<br>sort(nums, 0, k); &#x2F;&#x2F; 排序 nums 的前 k 个元素<br>for (int i &#x3D; 0; i &lt; actualLength; i++) {<br>    assert nums[i] &#x3D;&#x3D; expectedNums[i];<br>}</p></blockquote><p>如果所有的断言都通过，你的解决方案将会 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入</strong>：nums &#x3D; [3,2,2,3], val &#x3D; 3<br><strong>输出</strong>：2, nums &#x3D; [2,2,<em>,</em>]<br><strong>解释</strong>：你的函数函数应该返回 k &#x3D; 2, 并且 nums 中的前两个元素均为 2。<br>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入</strong>：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br><strong>输出</strong>：5, nums &#x3D; [0,1,4,0,3,<em>,</em>,_]<br><strong>解释</strong>：你的函数应该返回 k &#x3D; 5，并且 nums 中的前五个元素为 0,0,1,3,4。<br>注意这五个元素可以任意顺序返回。<br>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><h2 id="解法1：-时间复杂度O-n-，空间复杂度O-1"><a href="#解法1：-时间复杂度O-n-，空间复杂度O-1" class="headerlink" title="解法1：(时间复杂度O(n)，空间复杂度O(1))"></a>解法1：(时间复杂度O(n)，空间复杂度O(1))</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">        &gt; File Name: 3.removeElement.c</span><br><span class="hljs-comment">        &gt; Author:ZhangNan </span><br><span class="hljs-comment">        &gt; Mail:1470161695@qq.com </span><br><span class="hljs-comment">        &gt; Created Time: Tue 29 Oct 2024 08:54:11 AM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numsSize; j++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;nums[%d] = %d\n&quot;</span>, j, nums[j]);<br>    &#125;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> *nums1 = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">calloc</span>(numsSize, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numsSize; j++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;nums1[%d] = %d\n&quot;</span>, j, nums1[j]);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(++i &lt; numsSize)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i] == val) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            nums1[n] = nums[i];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1:nums1[%d] = %d, nums[%d] = %d\n&quot;</span>, n, nums1[n], i, nums[i]);<br>            n++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        nums[i] = nums1[i];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2:nums1[%d] = %d, nums[%d] = %d\n&quot;</span>, i, nums1[i], i, nums[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> n; <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> num[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">int</span> numsSize = <span class="hljs-number">8</span>;<br>    <span class="hljs-type">int</span> val = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> a = removeElement(num, numsSize, val);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize - a; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>, num[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;k = %d\n&quot;</span>, a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-26-删除排序数组中的重复项-可跳转"><a href="#3-26-删除排序数组中的重复项-可跳转" class="headerlink" title="3 26. 删除排序数组中的重复项(可跳转)"></a>3 <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/?envType=study-plan-v2&envId=top-interview-150">26. 删除排序数组中的重复项(可跳转)</a></h1><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code> ，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code>，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><p><strong>判题标准</strong>:</p><p>系统会用下面的代码来测试你的题解:</p><blockquote><p>int[] nums &#x3D; […]; &#x2F;&#x2F; 输入数组<br>int[] expectedNums &#x3D; […]; &#x2F;&#x2F; 长度正确&gt;的期望答案</p><p>int k &#x3D; removeDuplicates(nums); &#x2F;&#x2F; 调用</p><p>assert k &#x3D;&#x3D; expectedNums.length;<br>for (int i &#x3D; 0; i &lt; k; i++) {<br>   assert nums[i] &#x3D;&#x3D; expectedNums[i];<br>}</p></blockquote><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1</strong>：</p><blockquote><p><strong>输入</strong>：nums &#x3D; [1,1,2]<br><strong>输出</strong>：2, nums &#x3D; [1,2,_]<br><strong>解释</strong>：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>示例 2</strong>：</p><blockquote><p><strong>输入</strong>：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]<br><strong>输出</strong>：5, nums &#x3D; [0,1,2,3,4]<br><strong>解释</strong>：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums 已按 非严格递增 排列</code></li></ul><h2 id="解法1：-时间复杂度O-n-，空间复杂度O-1-1"><a href="#解法1：-时间复杂度O-n-，空间复杂度O-1-1" class="headerlink" title="解法1：(时间复杂度O(n)，空间复杂度O(1))"></a>解法1：(时间复杂度O(n)，空间复杂度O(1))</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">        &gt; File Name: 4.removeDuplicates.c</span><br><span class="hljs-comment">        &gt; Author:ZhangNan </span><br><span class="hljs-comment">        &gt; Mail:1470161695@qq.com </span><br><span class="hljs-comment">        &gt; Created Time: Wed 30 Oct 2024 10:22:36 AM CST</span><br><span class="hljs-comment"> ************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//int *nums1 = (int *)calloc(numsSize, sizeof(int));</span><br>    <span class="hljs-keyword">while</span>(i &lt; numsSize) &#123;<br>        nums[n++] = nums[i++];<br>        <span class="hljs-keyword">while</span>(i &lt; numsSize) &#123;<br>            <span class="hljs-keyword">if</span>(nums[n - <span class="hljs-number">1</span>] == nums[i + <span class="hljs-number">1</span>] &amp;&amp; i + <span class="hljs-number">1</span> &lt;= numsSize)&#123;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*for(int j = 0; j &lt; n; j++) &#123;</span><br><span class="hljs-comment">        nums[j] = nums1[j];</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> numsSize = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> n = removeDuplicates(arr, numsSize);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n = %d\n&quot;</span>, n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="4-80-删除有序数组中的重复项-II-可跳转"><a href="#4-80-删除有序数组中的重复项-II-可跳转" class="headerlink" title="4 80. 删除有序数组中的重复项 II(可跳转)"></a>4 <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/?envType=study-plan-v2&envId=top-interview-150">80. 删除有序数组中的重复项 II(可跳转)</a></h1><p>给你一个有序数组 <code>nums</code> ，请你 <strong>原地</strong> 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong>原地</strong> <strong>修改输入数组</strong> 并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><p><strong>说明</strong>：</p><p>为什么返回数值是整数，但输出的答案是数组呢？</p><p>请注意，输入数组是以 <strong>「引用」</strong> 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><blockquote><p>&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len &#x3D; removeDuplicates(nums);</p><p>&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。<br>&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。<br>for (int i &#x3D; 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p></blockquote><p><strong>示例 1</strong>：</p><blockquote><p><strong>输入</strong>：nums &#x3D; [1,1,1,2,2,3]<br><strong>输出</strong>：5, nums &#x3D; [1,1,2,2,3]<br><strong>解释</strong>：函数应返回新长度 length &#x3D; 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>示例 2</strong>：</p><blockquote><p><strong>输入</strong>：nums &#x3D; [0,0,1,1,1,1,2,3,3]<br><strong>输出</strong>：7, nums &#x3D; [0,0,1,1,2,3,3]<br><strong>解释</strong>：函数应返回新长度 length &#x3D; 7, 并且原数组的前七个元素被修改为 0, 0, 1, 1, 2, 3, 3。不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums 已按升序排列</code></li></ul><h2 id="解法1：-时间复杂度O-n-空间复杂度O-1"><a href="#解法1：-时间复杂度O-n-空间复杂度O-1" class="headerlink" title="解法1：(时间复杂度O(n) 空间复杂度O(1))"></a>解法1：(时间复杂度O(n) 空间复杂度O(1))</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; numsSize) &#123;<br>        nums[n++] = nums[i++];<br>        <span class="hljs-keyword">while</span>(i + <span class="hljs-number">1</span> &lt; numsSize) &#123;<br>            <span class="hljs-keyword">if</span>(nums[n - <span class="hljs-number">1</span>] == nums[i + <span class="hljs-number">1</span>])&#123;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-type">int</span> numsSize = <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> n = removeDuplicates(arr, numsSize);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n = %d\n&quot;</span>, n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-169-多数元素-可跳转"><a href="#5-169-多数元素-可跳转" class="headerlink" title="5 169. 多数元素(可跳转)"></a>5 <a href="https://leetcode.cn/problems/majority-element/description/?envType=study-plan-v2&envId=top-interview-150">169. 多数元素(可跳转)</a></h1><p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><strong>示例 1</strong>：</p><blockquote><p><strong>输入</strong>：nums &#x3D; [3,2,3]<br><strong>输出</strong>：3</p></blockquote><p><strong>示例 2</strong>：</p><blockquote><p><strong>输入</strong>：nums &#x3D; [2,2,1,1,1,2,2]<br><strong>输出</strong>：2</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5 * 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><p><strong>进阶</strong>：尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p><h2 id="思路解析："><a href="#思路解析：" class="headerlink" title="思路解析："></a>思路解析：</h2><blockquote><p>出于“多数元素”特殊性质，考虑以下情形：给定的数组如果存在“多数元素”，那么从这个数组中拿走两个不同的元素，新的数组一定仍然具有相同的“多数元素”。因为如果拿掉两个非“多数元素”，原本的“多数元素”占比就更多了，而拿走一个“多数元素”和一个其他元素，由于拿走的元素中“多数元素”和其他元素之比为1:1，原本为x:1，其中x&gt;1，因此剩余部分“多数元素”仍比其他元素多。</p><p>基于以上想法，以：7, 7, 5, 7, 5, 1 , 5, 7 , 5, 5, 7, 7 , 7, 7, 7, 7这一组数为例，分析下列过程：</p><blockquote><p>遍历数组：</p><p>第一个数字为7，它有可能就是我们要寻找的“多数元素”，不妨先假定他就是“多数元素”，声明一个变量candidate赋值为7来表示它就是我们目前假定的“多数元素”，设置一个新变量count为1，用以表示candidate确实是“多数元素”的一种“可能性大小”。</p><p>第二个数字为7，与candidate相等，这表明“7就是“多数元素”的可能性增大了”，将count值加一。</p><p>下一个数字为5，与candidate不相等，根据我们上述的分析，拿掉两个不相等的元素后，数组仍然具有相同的“多数元素”，可以理解为，把5与前面的candidate中的某一个一同拿掉后，剩下的数组与原数组的“多数元素”一样。因此我们将count值减一，表示取出目前的候选者与另外某一元素，这俩个取出的元素对“多数元素”的取值已经不再有任何影响，原数组的“多数元素”不变。可见，此candidate是“多数元素”的“可能性”变小了。</p><p>依此类推，下一个数字为7，将count加一，此时其值为2。</p><p>接下来两个数字分别为5和1， 这样count减一再减一，值变为0。也就是说，此时的“多数元素”取值可能情形与遍历开始时完全一样了：3个7和3个其他数相当于拿出数组的三对不同元素，剩下的数组“多数元素”和原数组相同。</p><p>下一个数字为5，由于此时count为0，在此后任何一个数字是“多数元素”的“可能性”都相同，因此我们不妨设置第一个遇到的数“5”为新的candidate，count设置为1，继续重复上述过程。</p><p>可见，随后count又减一、加一、加一、减一、减一，变为0，下一个数为7，重新将candidate赋值为7，并最终遍历完整个数组且count最终为4，此过程中未再次减小至0，最终的candidate就是我们需要找的“多数元素”，因为遍历完后相当于将所有的非最终candidate的数每个都和candidate这个数组队删除，上面所说的“可能性大小”变量count的实际含义就是成对拿走元素后剩下的candidate的个数，此候选者自然就是要求的“多数元素”了。</p></blockquote></blockquote><h2 id="如上思路解法1：-时间复杂度O-n-空间复杂度O-1"><a href="#如上思路解法1：-时间复杂度O-n-空间复杂度O-1" class="headerlink" title="如上思路解法1：(时间复杂度O(n) 空间复杂度O(1))"></a>如上思路解法1：(时间复杂度O(n) 空间复杂度O(1))</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span> &#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> num = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; i++) &#123;<br>        <span class="hljs-keyword">if</span>(nums[i] == num) &#123;<br>            count++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            count--;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>) &#123;<br>            num = nums[i + <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> arr1[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">int</span> numsSize = <span class="hljs-number">7</span>;<br>    <span class="hljs-type">int</span> num1 = majorityElement(arr1, numsSize);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;majorityElement = %d\n&quot;</span>, num1);<br><br>    <span class="hljs-type">int</span> arr2[<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>    numsSize = <span class="hljs-number">11</span>;<br>    num1 = majorityElement(arr2, numsSize);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;majorityElement = %d\n&quot;</span>, num1);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-189-轮转数组"><a href="#6-189-轮转数组" class="headerlink" title="6 189. 轮转数组"></a>6 <a href="https://leetcode.cn/problems/rotate-array/description/?envType=study-plan-v2&envId=top-interview-150">189. 轮转数组</a></h1><p>给定一个整数数组 <code>nums</code>，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数。</p><p><strong>示例 1</strong>:</p><blockquote><p><strong>输入</strong>: nums &#x3D; [1,2,3,4,5,6,7], k &#x3D; 3<br><strong>输出</strong>: [5,6,7,1,2,3,4]<br><strong>解释</strong>:<br>向右轮转 1 步: [7,1,2,3,4,5,6]<br>向右轮转 2 步: [6,7,1,2,3,4,5]<br>向右轮转 3 步: [5,6,7,1,2,3,4]</p></blockquote><p><strong>示例 2</strong>:</p><blockquote><p><strong>输入</strong>：nums &#x3D; [-1,-100,3,99], k &#x3D; 2<br><strong>输出</strong>：[3,99,-1,-100]<br><strong>解释</strong>:<br>向右轮转 1 步: [99,-1,-100,3]<br>向右轮转 2 步: [3,99,-1,-100]</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= k &lt;= 105</code></li></ul><p><strong>进阶</strong>：</p><ul><li>尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。</li><li>你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？</li></ul><h2 id="解法1：-时间复杂度O-n-空间复杂度O-1-1"><a href="#解法1：-时间复杂度O-n-空间复杂度O-1-1" class="headerlink" title="解法1：(时间复杂度O(n) 空间复杂度O(1))"></a>解法1：(时间复杂度O(n) 空间复杂度O(1))</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> k)</span> &#123;<br>    k = k % numsSize;<br>    <span class="hljs-keyword">if</span> (k &lt;= numsSize &amp;&amp; numsSize != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = numsSize - <span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>            nums[i] ^= nums[j];<br>            nums[j] ^= nums[i];<br>            nums[i] ^= nums[j];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = k - <span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>            nums[i] ^= nums[j];<br>            nums[j] ^= nums[i];<br>            nums[i] ^= nums[j];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k, j = numsSize - <span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>            nums[i] ^= nums[j];<br>            nums[j] ^= nums[i];<br>            nums[i] ^= nums[j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span> numsSize = <span class="hljs-number">11</span>;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">4</span>;<br>    rotate(arr, numsSize, k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解法2：-时间复杂度O-n-空间复杂度O-k"><a href="#解法2：-时间复杂度O-n-空间复杂度O-k" class="headerlink" title="解法2：(时间复杂度O(n) 空间复杂度O(k))"></a>解法2：(时间复杂度O(n) 空间复杂度O(k))</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> arr[k];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        arr[i] = nums[numsSize  - k + i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = numsSize - k; j &gt; <span class="hljs-number">0</span>; j--) &#123;<br>        nums[j + k - <span class="hljs-number">1</span>] = nums[j - <span class="hljs-number">1</span>]; <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        nums[i] = arr[i];<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">11</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span> numsSize = <span class="hljs-number">11</span>;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">4</span>;<br>    rotate(arr, numsSize, k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
      <category>面试经典150题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>达芬奇笔记</title>
    <link href="/2024/09/12/%E5%BD%B1%E8%A7%86%E9%A3%93%E9%A3%8E_%E8%BE%BE%E8%8A%AC%E5%A5%87_%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/12/%E5%BD%B1%E8%A7%86%E9%A3%93%E9%A3%8E_%E8%BE%BE%E8%8A%AC%E5%A5%87_%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.mubu.com/doc/3-5PZ1iGNGk">第一节内容</a><br>初步介绍达芬奇的<strong>工作流程</strong>和<strong>七个剪辑面板的功能</strong><br><a href="https://www.mubu.com/doc/KzrDAkKU">第二节内容</a></p><p><a href="https://www.mubu.com/doc/4l7BsfVGDL2">第三节内容</a></p>]]></content>
    
    
    <categories>
      
      <category>BiliBili</category>
      
      <category>剪辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剪辑</tag>
      
      <tag>达芬奇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu系统操作</title>
    <link href="/2024/08/18/Ubuntu%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/08/18/Ubuntu%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu系统操作笔记"><a href="#Ubuntu系统操作笔记" class="headerlink" title="Ubuntu系统操作笔记"></a>Ubuntu系统操作笔记</h1><h2 id="文件操作："><a href="#文件操作：" class="headerlink" title="文件操作："></a>文件操作：</h2><ul><li>查看当前目录：pwd</li><li>查看当前目录下的文件：ls</li><li>查看当前目录下的文件详细信息：ls -l</li><li>查看当前目录下的文件详细信息，包括隐藏文件：ls -la</li><li>切换目录：cd </li><li>创建目录：mkdir filename</li><li>删除文件：rm filename</li><li>删除目录：rm -r</li><li>复制文件：cp oldfilename newfilename</li><li>移动文件：mv oldfilename newfilename</li><li>查看文件内容：cat filename</li><li>更改文件名字：mv oldname newname</li></ul><h2 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h2><ul><li>打开文件：vim filename</li><li>保存文件：:wq</li><li>退出编辑器：:q</li></ul><h2 id="C编译"><a href="#C编译" class="headerlink" title="C编译"></a>C编译</h2><ul><li>gcc outputfile<br>  &#x2F;&#x2F;这个形成的可执行文件是.&#x2F;a.out,每次gcc过后，.&#x2F;a.out都会被重新生成</li><li>gcc outputfile -lm<br>  &#x2F;&#x2F;&lt;math.h&gt;在编译时加进去，才能编译成功</li></ul><h1 id="Tabby终端快捷键"><a href="#Tabby终端快捷键" class="headerlink" title="Tabby终端快捷键"></a>Tabby终端快捷键</h1><ul><li>Ctrl + +&#x2F;- 调节字体大小</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学者如何 code in 云主机</title>
    <link href="/2024/07/31/%E5%A6%82%E4%BD%95code%20with%20%E4%BA%91%E4%B8%BB%E6%9C%BA/"/>
    <url>/2024/07/31/%E5%A6%82%E4%BD%95code%20with%20%E4%BA%91%E4%B8%BB%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="3-初学者如何-code-in-云主机？"><a href="#3-初学者如何-code-in-云主机？" class="headerlink" title="3.初学者如何 code in 云主机？"></a>3.初学者如何 code in 云主机？</h1><p><strong>此处“云主机”指</strong>：轻量应用服务器(具体的其他服务器类型，请自行搜索比较区别)</p><h2 id="3-0-前言：为什么要用云服务器？（简述）"><a href="#3-0-前言：为什么要用云服务器？（简述）" class="headerlink" title="3.0 前言：为什么要用云服务器？（简述）"></a>3.0 前言：为什么要用云服务器？（简述）</h2><blockquote><p>如果，你用的是windows系统，但是想学习linux系统上的编程。你可以在自己的电脑上安装虚拟机，然后在虚拟机上安装linux系统，然后在linux系统上进行编程。</p></blockquote><p><strong>优点</strong>：</p><ol><li>可以学到虚拟机的相关配置。</li><li>基本上不用花费too much的金钱成本。</li></ol><p><strong>缺点</strong>：</p><ol><li>本来想着学习linux系统，但是花费太多时间在虚拟机上。学习战线被拉得太长了，激情被消磨了。</li><li>安装好后，倒腾了一段时间后，把虚拟机搞崩了。</li><li>虚拟机没有独立的公网IP。</li></ol><blockquote><p>所以，如果你想学习linux系统上的编程，并且不想花费太多时间在虚拟机上，那么，云主机就派上了用场。<br>首先，云主机的配置比较简单，不需要很多的时间去倒腾，可以及时满足代码学习的需求。<br>其次，云主机的使用体验很好，可以随时随地的使用，不用担心服务器的维护，服务器崩了直接一键重装即可。<br>最后，云主机有自己的独立公网IP。</p></blockquote><p><strong>虚拟机和云主机各有优势，在不同的应用场景中需要仔细考虑自己的需求</strong><br>具体的区别<a href="https://cloud.tencent.com/developer/article/2103143">点击此处</a></p><h2 id="3-1-云主机的选购"><a href="#3-1-云主机的选购" class="headerlink" title="3.1 云主机的选购"></a>3.1 云主机的选购</h2><p>云主机是一种虚拟服务器，可以让你在线上运行代码，而不需要购买服务器。云主机的优点是按需付费，只需要支付使用时间，不需要预先购买服务器，因此可以节省开支。</p><p>目前，有很多云主机供应商可以提供云主机服务，本文只拿腾讯云和阿里云举例。</p><blockquote><p>虽然两家都有免费试用期，但是一旦选择免费试用，那么首单优惠也就没了。首单优惠力度很大的多是骨折，所以，建议往一年以上购买。</p></blockquote><blockquote><p>配置选择：云主机的配置可以根据自己的需求进行选择，比如内存大小、硬盘大小、CPU核数等。<strong>但是基本上最低的配置就可以满足一般的代码学习，前期没必要纠结于云主机的硬件配置</strong></p></blockquote><h3 id="3-1-1腾讯云"><a href="#3-1-1腾讯云" class="headerlink" title="3.1.1腾讯云"></a>3.1.1腾讯云</h3><p><a href="https://cloud.tencent.com/act/pro/Featured?fromSource">腾讯云选购界面</a></p><h3 id="3-1-2-阿里云"><a href="#3-1-2-阿里云" class="headerlink" title="3.1.2 阿里云"></a>3.1.2 阿里云</h3><p><a href="https://www.aliyun.com/benefit/waitou/V2">阿里云选购界面</a></p><h2 id="3-2-云主机的连接"><a href="#3-2-云主机的连接" class="headerlink" title="3.2 云主机的连接"></a>3.2 云主机的连接</h2><h3 id="3-2-1-准备"><a href="#3-2-1-准备" class="headerlink" title="3.2.1 准备"></a>3.2.1 准备</h3><p>连接前你需要准备以下信息：(check一下)</p><div>            <input type="checkbox"  >云主机的IP地址          </div><div>            <input type="checkbox"  >云主机的用户名和密码          </div><div>            <input type="checkbox"  >云主机的端口号          </div><div>            <input type="checkbox"  >下载<a href="https://github.com/Eugeny/tabby/releases/tag/v1.0.211">Tabby</a>          </div><p>我的tabby下载的是这个版本号<br><img src="/picture/tabby_win.png" alt="图片"></p><h3 id="3-2-2-连接"><a href="#3-2-2-连接" class="headerlink" title="3.2.2 连接"></a>3.2.2 连接</h3><ol><li>下载好tabby后，打开软件进入主界面<br><img src="/picture/tabby%E7%9A%84%E4%B8%BB%E7%95%8C%E9%9D%A2.png" alt="图片"></li><li>然后进入setting修改语言为中文</li><li>再次进入主界面，点击配置与连接，再弹出的界面最下面点击管理配置，进入配置界面<br> <img src="/picture/%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2.png%22" alt="图片"></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>云主机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>入门</tag>
      
      <tag>轻量应用服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>船说C语言</title>
    <link href="/2024/07/29/%E8%88%B9%E8%AF%B4%E8%AF%BE%E7%A8%8B/%E8%88%B9%E8%AF%B4C%E8%AF%AD%E8%A8%80/"/>
    <url>/2024/07/29/%E8%88%B9%E8%AF%B4%E8%AF%BE%E7%A8%8B/%E8%88%B9%E8%AF%B4C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>船说c语言中的代码大部分都在这，但是一些演示属性的代码不可能全部包含。</p><p><a href="https://www.mubu.com/doc/1Etd_D1RA3P">第一章幕布笔记链接</a><br><a href="https://www.mubu.com/doc/5m8i6gHWnq3">第二章幕布笔记链接</a><br><a href="https://www.mubu.com/doc/5YasWC7zCij">第三章幕布笔记链接</a><br><a href="https://www.mubu.com/doc/4XspbzIk8rg">第四章幕布笔记链接</a><br><a href="https://github.com/NFraw/-C-">代码链接</a></p>]]></content>
    
    
    <categories>
      
      <category>BiliBili</category>
      
      <category>船说C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哔哩哔哩课堂-宏观经济学-第1课</title>
    <link href="/2024/07/28/BiLiBiLi%E8%AF%BE%E7%A8%8B/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%AF%BE%E5%A0%82-%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-1/"/>
    <url>/2024/07/28/BiLiBiLi%E8%AF%BE%E7%A8%8B/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%AF%BE%E5%A0%82-%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6-1/</url>
    
    <content type="html"><![CDATA[<h1 id="哔哩哔哩课堂-宏观经济学-第1课"><a href="#哔哩哔哩课堂-宏观经济学-第1课" class="headerlink" title="哔哩哔哩课堂-宏观经济学-第1课"></a>哔哩哔哩课堂-宏观经济学-第1课</h1><blockquote><p>回顾2021年中国经济事件</p></blockquote><p><a href="https://www.bilibili.com/cheese/play/ss3461?csource">课程链接</a></p><h2 id="1-1课程先导："><a href="#1-1课程先导：" class="headerlink" title="1.1课程先导："></a>1.1课程先导：</h2><blockquote><ol><li>慢变量：人性、历史政治、国内政治、国际政治。</li></ol></blockquote><blockquote><ol start="2"><li>宏观经济大势主要就是沿着“慢变量”来不断演进的</li></ol></blockquote><blockquote><ol start="3"><li>人物介绍：约翰·梅纳德·凯恩斯（宏观经济学之父）《通论》《货币论》主张政府干预经济</li></ol></blockquote><blockquote><ol start="4"><li>中国十八大之后中国宏观经济计划改变</li></ol></blockquote><h2 id="1-2开始分析："><a href="#1-2开始分析：" class="headerlink" title="1.2开始分析："></a>1.2开始分析：</h2><p>2021年1月29号早上，王歧山副主席会见美国第十二届商界领导，美国前高官</p><ul><li>美国政党背后金主</li><li>民主党：金融、高科技、传媒、娱乐业</li><li>共和党：传统制造业和传统能源</li><li>与会结果：拜登政府取消特朗普时期贸易关税，后续又收了回去。</li></ul>]]></content>
    
    
    <categories>
      
      <category>BiliBili</category>
      
      <category>宏观经济学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宏观经济学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哔哩哔哩课堂-偏见看政治-第1课</title>
    <link href="/2024/07/28/BiLiBiLi%E8%AF%BE%E7%A8%8B/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%AF%BE%E5%A0%82-%E5%81%8F%E8%A7%81%E7%9C%8B%E6%94%BF%E6%B2%BB-1/"/>
    <url>/2024/07/28/BiLiBiLi%E8%AF%BE%E7%A8%8B/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%AF%BE%E5%A0%82-%E5%81%8F%E8%A7%81%E7%9C%8B%E6%94%BF%E6%B2%BB-1/</url>
    
    <content type="html"><![CDATA[<h1 id="哔哩哔哩课堂-偏见看政治-第1课"><a href="#哔哩哔哩课堂-偏见看政治-第1课" class="headerlink" title="哔哩哔哩课堂-偏见看政治-第1课"></a>哔哩哔哩课堂-偏见看政治-第1课</h1><p><a href="https://www.bilibili.com/cheese/play/ss1459">课程链接</a></p>]]></content>
    
    
    <categories>
      
      <category>BiliBili</category>
      
      <category>偏见看政治</category>
      
    </categories>
    
    
    <tags>
      
      <tag>政治学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好用的Coding插件（持续更新）</title>
    <link href="/2024/07/27/%E5%A5%BD%E7%94%A8%E7%9A%84Coding%E6%8F%92%E4%BB%B6%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
    <url>/2024/07/27/%E5%A5%BD%E7%94%A8%E7%9A%84Coding%E6%8F%92%E4%BB%B6%E7%AC%AC%E4%B8%80%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="5-好用的Coding插件（持续更新）"><a href="#5-好用的Coding插件（持续更新）" class="headerlink" title="5.好用的Coding插件（持续更新）"></a>5.好用的Coding插件（持续更新）</h1><h2 id="5-0前言"><a href="#5-0前言" class="headerlink" title="5.0前言"></a>5.0前言</h2><h2 id="在平时写代码的时候，好的代码助手可以帮助我们补充代码，提供优化建议，解决许多问题。下面介绍一些自己用过的好用的Coding插件。-此处Coding单纯指写代码这一行为，不是特殊的某一款软件。"><a href="#在平时写代码的时候，好的代码助手可以帮助我们补充代码，提供优化建议，解决许多问题。下面介绍一些自己用过的好用的Coding插件。-此处Coding单纯指写代码这一行为，不是特殊的某一款软件。" class="headerlink" title="在平时写代码的时候，好的代码助手可以帮助我们补充代码，提供优化建议，解决许多问题。下面介绍一些自己用过的好用的Coding插件。- 此处Coding单纯指写代码这一行为，不是特殊的某一款软件。"></a>在平时写代码的时候，好的代码助手可以帮助我们补充代码，提供优化建议，解决许多问题。下面介绍一些自己用过的好用的Coding插件。<br>- 此处Coding单纯指写代码这一行为，不是特殊的某一款软件。</h2><h2 id="5-1fittencode：专业-AI-代码助手"><a href="#5-1fittencode：专业-AI-代码助手" class="headerlink" title="5.1fittencode：专业 AI 代码助手"></a>5.1fittencode：专业 AI 代码助手</h2><h3 id="5-1-1适用软件：-官方教程"><a href="#5-1-1适用软件：-官方教程" class="headerlink" title="5.1.1适用软件：(官方教程)"></a>5.1.1适用软件：(官方教程)</h3><ol><li><a href="https://code.fittentech.com/tutor_vscode_zh">Visual Studio Code安装教程</a></li><li><a href="https://code.fittentech.com/tutor_jetbrains_zh">JetBrains 系列产品安装教程</a></li><li><a href="https://code.fittentech.com/tutor_vs_zh">Visual Studio 版安装教程</a></li><li><a href="https://code.fittentech.com/tutor_vim_zh">Vim 版安装教程</a></li></ol><h3 id="5-1-2VScode版官方介绍："><a href="#5-1-2VScode版官方介绍：" class="headerlink" title="5.1.2VScode版官方介绍："></a>5.1.2VScode版官方介绍：</h3><p>Fitten Code 是一个由非十科技自研代码大模型驱动的 AI 代码助手。它支持多种语言，包括 <code>Python</code>、<code>JavaScript</code>、<code>TypeScript</code>、<code>Java</code>、<code>C</code>、<code>C++</code> 等。使用 Fitten Code，你可以<code>自动进行代码补全</code>，并可以在 Visual Studio Code 侧边栏内<code>生成代码</code>、<code>生成注释</code>、<code>编辑代码</code>、<code>解释代码</code>、<code>生成测试</code>、<code>查找错误</code>等。</p><p>官网详情<a href="https://code.fittentech.com/">请点击此处</a></p>]]></content>
    
    
    <categories>
      
      <category>好物推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的hexo博客提交流程</title>
    <link href="/2024/07/27/%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/07/27/%E6%88%91%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="4-我的hexo博客提交流程"><a href="#4-我的hexo博客提交流程" class="headerlink" title="4.我的hexo博客提交流程"></a>4.我的hexo博客提交流程</h1><ol><li>本地写好博客</li><li>check第一次</li><li>进入blog进行修改</li><li>本地预览</li><li>到晚上全面check第二次，检查是否有限制的内容</li><li>提交到的github仓库</li><li>刷新网址，查看博客是否更新  </li><li>完成</li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何免费搭建一个属于自己的hexo静态博客</title>
    <link href="/2024/07/26/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/07/26/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="2-如何免费搭建一个属于自己的hexo静态博客"><a href="#2-如何免费搭建一个属于自己的hexo静态博客" class="headerlink" title="2.如何免费搭建一个属于自己的hexo静态博客"></a>2.如何免费搭建一个属于自己的hexo静态博客</h1><p>本来想着自己写一篇搭建hexo博客的文章，后来找到了这篇文章<a href="https://blog.csdn.net/cat_bayi/article/details/128725230">Hexo教程，看这一篇就够了- How to系列</a>，写得非常详细了，而且图文都有，那么我就说说自己搞错的地方吧。</p><h2 id="2-1准备："><a href="#2-1准备：" class="headerlink" title="2.1准备："></a>2.1准备：</h2><ol><li>安装一个加速器用于github的登录，我用的<a href="https://steampp.net/">watt toolkit</a>。</li><li><a href="https://www.cnblogs.com/moshuying/p/15367181.html">注册github</a></li><li><a href="https://blog.csdn.net/msdcp/article/details/127033151">下载vdcode编辑器，安装Markdown插件</a><blockquote><p>补充：VScode简单说就是一款插件软件，安装上对应的插件，就可以进行编程（C、C++、Java、Python、JavaScript等）</p></blockquote></li></ol><hr><h2 id="2-2安装时："><a href="#2-2安装时：" class="headerlink" title="2.2安装时："></a>2.2安装时：</h2><ol><li>你需要注意你的终端要有管理员权限，否则操作的时候会出现权限不足的报错。</li><li>目前Gitee和coding的pages页面已经是停用了的（我看网上的远端免费部署就是在这三个代码托管平台上面），也就是说，要想部署，只能在github上面。</li><li>要想把自己的博客成功部署到github上面，现在只能是ssh公私匙连接和令牌（令牌我没有成功，感兴趣可以试试）通过https的账号密码模式登录的功能在2021年八月就已经取消了。公私匙连接，令牌的配置可以参考<a href="https://blog.csdn.net/qq_46941656/article/details/119737804">Github创建个人访问令牌教程</a>。</li></ol><h2 id="2-3配置主题时："><a href="#2-3配置主题时：" class="headerlink" title="2.3配置主题时："></a>2.3配置主题时：</h2><ol><li>在windows下，文件的地址分隔符是<code>\</code>，而，主题配置里面的文件地址都是<code>/</code>，所以在配置主题时需要注意路径的分隔符。</li><li>远端的图片加载不出来时，1.先检查分隔符，2.看看自己的本都预览是否正常。如果都没问题，就试试shift+F5刷新一下远端页面。</li></ol><h2 id="2-4后续提交"><a href="#2-4后续提交" class="headerlink" title="2.4后续提交"></a>2.4后续提交</h2><ol><li><strong>这个真的很重要：在配置文件时，单个文件（照片、音频、视频等）的大小不能超过100M，否则会上传失败。然后处理很麻烦。</strong><br>文件过大可以通过git-lfs来进行push，具体可以参考<a href="https://git-lfs.github.com/">git-lfs官网</a>。但是github的免费空间有限，所以还是要注意文件大小。</li></ol><h2 id="2-5如果崩溃-精神或者程序"><a href="#2-5如果崩溃-精神或者程序" class="headerlink" title="2.5如果崩溃(精神或者程序)"></a>2.5如果崩溃(精神或者程序)</h2><blockquote><p>直接重新创建一个仓库和本地文件夹就好了</p></blockquote><ol><li>通过 <code>软件名 -v</code>的格式查看git、node、npm、cnpm的版本号（版本号都有则配置的环境依然存在）</li><li><code>hexo init 文件名</code>创建一个新的blog目录</li><li><code>cd 文件名</code>进入blog目录</li><li><code>cnpm install</code>安装依赖包</li><li><code>hexo clean</code>清理缓存文件</li><li><code>hexo g</code>生成静态文件</li><li><code>hexo s</code>启动本地预览</li><li>进入本地localhost预览</li><li><code>npm install hexo-deployer-git --save</code>安装deploy-git ，实现部署</li><li>检查自己的主题和文件有无异常（主题的修改按照之前的步骤进行就可以），最后再检查一下自己的localhost预览是否正常。</li><li>然后<code>hexo d</code>部署到github</li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>入门</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2024/07/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2024/07/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-我的第一篇博客文章"><a href="#1-我的第一篇博客文章" class="headerlink" title="1.我的第一篇博客文章"></a>1.我的第一篇博客文章</h1><p>经历四天的兜兜转转，今天终于也是把hexo框架的博客基本搭建起来了。</p><p>值得记录。</p>]]></content>
    
    
    <categories>
      
      <category>计算机随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>纪念</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
